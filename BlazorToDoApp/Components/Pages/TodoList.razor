@page "/"
@rendermode InteractiveServer
@inject BlazorToDoApp.Data.TodoContext DbContext
@using BlazorToDoApp.Models
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JSRuntime

<h3>To Do List</h3>

<div class="mb-3">
    <!-- Tasks field -->
    <input type="text" @bind="newTask" class="form-control" placeholder="Enter a new task" />

    <!-- Due date field -->
    <label for="dueDate" class="form-label">Due Date</label>
    <input type="date" @bind="newDueDate" class="form-control" id="dueDate" />

    <!-- Due time field -->
    <label for="dueTime" class="form-label">Due Time</label>
    <input type="text" list="fiveMinuteInterval" @bind="newDueTime" class="form-control" id="dueTime" placeholder="HH:mm" />

    <!-- Lists all the times in 5 minute intervals -->
    <datalist id="fiveMinuteInterval">
        @for (var hour = 0; hour < 24; hour++)
        {
            for (var minute = 0; minute < 60; minute += 5)
            {
                var time = new DateTime(1, 1, 1, hour, minute, 0);
                <option value="@time.ToString("hh:mm tt")"></option>
            }
        })
    </datalist>

    <!-- Dropdown for assigning a category to the new task -->
    <label for="assignCategory" class="form-label">Assign Category:</label>
    <select @bind="SelectedCategoryId" class="form-select mt-2" id="assignCategory">
        <option value="">Select a category</option>
        @foreach (var category in categories)
        {
            <option value="@category.CategoryId">@category.Name</option>
        }
    </select>

    <!-- Button for adding tasks -->
    <button class="btn btn-success mt-2" @onclick="AddTask">
        <i class="fas fa-plus"></i> Add Task
    </button>
</div>

<!-- Filters task by category-->
<div class="mb-3">
    <label for="filterCategory" class="form-label">Filter by Category</label>
    <!-- Triggers FilterTasks method when category is selected -->
    <select @onchange="FilterTasks" class="form-select mt-2" id="filterCategory">
        <option value="">All Categories</option>
        @foreach (var category in categories)
        {
            <option value="@category.CategoryId">@category.Name</option>
        }
    </select>
</div>

<table class="table table-striped table-hover table-bordered">
    <thead class="table-dark">
        <tr>
            <th>Task</th>
            <th>Category</th>
            <th>Due Date</th>
            <th>Overdue</th>
            <th>Completed</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in tasks)
        {
            <tr class="@GetRowClass(item)">
                <td>@item.Task</td>
                <td>@(item.Category != null ? item.Category.Name : "No Category")</td>
                <td>@item.DueDate?.ToString("MM/dd/yyyy hh:mm tt")</td>
                <td>@(item.DueDate.HasValue && item.DueDate.Value < DateTime.Now && !item.IsCompleted ? "Yes" : "No")</td>
                <td>
                    <input type="checkbox" @bind="item.IsCompleted" @bind:after="() => UpdateTask(item)" />
                </td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteTask(item.Id)">
                        <i class="fas fa-trash-alt"></i> Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    // Stores categories from the database
    private List<Category> categories = new List<Category>();

    // Stores tasks from the database
    private List<TodoItem> tasks = new List<TodoItem>();

    // Input fields for adding tasks
    private string newTask = string.Empty;
    private DateTime? newDueDate = null;
    private string newDueTime;
    private int? SelectedCategoryId;
    private int? SelectedCategoryFilter;


    private string GetRowClass(TodoItem item)
    {
        if (!item.IsCompleted && item.DueDate.HasValue && item.DueDate.Value < DateTime.Now)
        {
            return "table-danger";
        }

        return item.IsCompleted ? "table-success" : "table-warning";
    }

    protected override async Task OnInitializedAsync()
    {
        // Load categories and tasks
        await LoadCategories();
        await LoadTasks();
    }

    private async Task LoadCategories()
    {
        categories = await DbContext.Categories.ToListAsync();
    }

    private async Task LoadTasks()
    {
        if (SelectedCategoryFilter.HasValue)
        {
            // Filter tasks by category
            tasks = await DbContext.TodoItems
                .Include(t => t.Category)
                .Where(t => t.CategoryId == SelectedCategoryFilter && !t.IsCompleted)
                .ToListAsync();
        }
        else
        {
            // Load all tasks
            tasks = await DbContext.TodoItems
                .Include(t => t.Category)
                .Where(t => !t.IsCompleted)
                .ToListAsync();
        }

        // Refresh the UI
        StateHasChanged();
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask))
        {
            TimeSpan? timeOfDay = null;

            if(DateTime.TryParseExact(newDueTime, "hh:mm tt", null, System.Globalization.DateTimeStyles.None,out var parsedTime))
            {
                timeOfDay = parsedTime.TimeOfDay;
            }

            var task = new TodoItem
                {
                    Task = newTask,
                    IsCompleted = false,
                    DueDate = newDueDate?.Add(timeOfDay ?? TimeSpan.Zero),
                    CategoryId = SelectedCategoryId
                };

            DbContext.TodoItems.Add(task);
            await DbContext.SaveChangesAsync();

            newTask = string.Empty;
            newDueDate = null;
            newDueTime = string.Empty;
            SelectedCategoryId = null;
            await LoadTasks();
        }
        else
        {
            Console.WriteLine("New task is empty.");
        }
    }

    private async Task UpdateTask(TodoItem item)
    {
        DbContext.TodoItems.Update(item);
        await DbContext.SaveChangesAsync();
        await LoadTasks();
    }

    private async Task ConfirmDeleteTask(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this task?" });
        if (confirm)
        {
            await DeleteTask(id);
        }
    }

    private async Task DeleteTask(int id)
    {
        var task = tasks.FirstOrDefault(t => t.Id == id);
        if (task != null)
        {
            DbContext.TodoItems.Remove(task);
            await DbContext.SaveChangesAsync();
            await LoadTasks();
        }
    }

    // Method to filter tasks by category
    private async Task FilterTasks(ChangeEventArgs e)
    {
        SelectedCategoryFilter = int.TryParse(e.Value?.ToString(), out int value) ? value : (int?)null;
        await LoadTasks();
    }
}
